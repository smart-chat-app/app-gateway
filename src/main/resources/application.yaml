server:
  port: 8083

management:
  server:
    port: 9090
  endpoints:
    web:
      base-path: /actuator
      exposure:
        include: health,info,prometheus
    shutdown:
      access: unrestricted


spring:
  cloud:
    gateway:
      httpclient:
        connect-timeout: 3000
        response-timeout: 10s
      default-filters:
        - DedupeResponseHeader=Access-Control-Allow-Credentials Access-Control-Allow-Origin
        - RemoveRequestHeader=Cookie
        - name: RequestSize
          args: { maxSize: 5MB }
        - name: RequestRateLimiter
          args:
            key-resolver: "#{@principalOrIpKeyResolver}"
            redis-rate-limiter.replenishRate: ${RL_REPLENISH:20}
            redis-rate-limiter.burstCapacity: ${RL_BURST:40}
      globalcors:
        add-to-simple-url-handler-mapping: true
        corsConfigurations:
          '[/**]':
            allowedOrigins: ${CORS_ALLOWED_ORIGINS:http://localhost:5173}
            allowedMethods: [ GET,POST,PUT,DELETE,OPTIONS,PATCH ]
            allowedHeaders: [ Authorization,Content-Type,X-Request-Id ]
            allowCredentials: true
      routes:
        - id: user-profile
          uri: http://user-profile-service:8081
          predicates:
            - Path=/users,/users/**
        - id: chat
          uri: http://chat-service:8082
          predicates:
            - Path=/chats,/chats/**
        - id: message
          uri: http://message-service:8083
          predicates:
            - Path=/messages,/messages/**,/chats/*/messages,/chats/*/messages/**
        - id: presence
          uri: http://presence-service:8085
          predicates:
            - Path=/presence,/presence/**,/typing,/typing/**
        - id: media
          uri: http://media-service:8086
          predicates:
            - Path=/media,/media/**
        - id: ai
          uri: http://ai-orchestrator-service:8090
          predicates:
            - Path=/ai,/ai/**

  data:
    redis:
      host: redis
      port: 6379
      timeout: 2s
      client-type: lettuce
      ssl: false
  main:
    web-application-type: reactive
  docker:
    compose:
      enabled: false

  application:
    name: api-gateway
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${ISSUER_URI}
          jwk-set-uri: ${KEYCLOAK_JWKS}

logging:
  level:
    org:
      springframework:
        security: DEBUG
    org.springframework.cloud.gateway: DEBUG